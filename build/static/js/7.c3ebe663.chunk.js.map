{"version":3,"sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"names":["initialValues","name","email","message","validate","values","errors","test","Content","styled","Container","TextWrapper","withTranslation","_ref","title","content","t","React","createElement","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","handleChange","handleSubmit","formState","setFormState","useState","event","persist","value","target","prevState","[object Object]","async","preventDefault","Object","every","error","fetch","method","headers","Content-Type","body","JSON","stringify","ok","reset","notification","description","useForm","ValidationType","_ref2","type","ErrorMessage","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","Block","autoComplete","onSubmit","span","Input","TextArea","Button"],"mappings":"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","file":"static/js/7.c3ebe663.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n    const url = \"\"; // Fill in your API URL here\r\n\r\n    try {\r\n      if (Object.values(errors).every((error) => error === \"\")) {\r\n        const response = await fetch(url, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          notification[\"error\"]({\r\n            message: \"Error\",\r\n            description:\r\n              \"There was an error sending your message, please try again later.\",\r\n          });\r\n        } else {\r\n          event.target.reset();\r\n          setFormState(() => ({\r\n            values: { ...initialValues },\r\n            errors: { ...initialValues },\r\n          }));\r\n\r\n          notification[\"success\"]({\r\n            message: \"Success\",\r\n            description: \"Your message has been sent!\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      notification[\"error\"]({\r\n        message: \"Error\",\r\n        description: \"Failed to submit form. Please try again later.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import React from \"react\";\r\nimport { withTranslation, TFunction } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: TFunction;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import React from \"react\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import React from \"react\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\" triggerOnce>\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\" triggerOnce>\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Your Name\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Your Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"For what you want to use Basic.Social?\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"sourceRoot":""}